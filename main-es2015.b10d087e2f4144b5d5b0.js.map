{"version":3,"sources":["webpack:///src/app/shared/pizza.service.ts","webpack:///src/app/pizza/pizza.component.ts","webpack:///src/app/pizza/pizza.component.html","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/shared/repeat.directive.ts","webpack:///src/app/details/details.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/details/details.component.ts","webpack:///src/app/info/info.component.ts","webpack:///src/app/info/info.component.html","webpack:///src/app/imprint/imprint.component.ts","webpack:///src/app/imprint/imprint.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["PizzaService","http","platformId","apiUrl","this","get","id","PizzaComponent","DashboardComponent","ps","pizzas$","getAll","platform","NgForRepeat","repeat","ngForOf","Array","routes","path","redirectTo","pathMatch","component","DetailsComponent","route","pizza$","paramMap","pipe","map","params","parseInt","switchMap","getById","InfoComponent","ImprintComponent","AppRoutingModule","forRoot","initialNavigation","AppComponent","title","AppModule","provide","useValue","withServerTransition","appId","document","addEventListener","bootstrapModule","catch","err","console","error","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports"],"mappings":"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","file":"x","sourcesContent":["import { Injectable, PLATFORM_ID, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\n\nimport { Pizza } from './pizza';\nimport { isPlatformServer, isPlatformBrowser } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PizzaService {\n\n  private apiUrl = 'https://pizza.angular.schule';\n\n  constructor(private http: HttpClient, @Inject(PLATFORM_ID) private platformId: object) { }\n\n  getAll(): Observable<Pizza[]> {\n    return this.http.get<Pizza[]>(`${this.apiUrl}/pizzas`);\n  }\n\n  getById(id: number): Observable<Pizza> {\n    return this.http.get<Pizza>(`${this.apiUrl}/pizza/${id}`);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Pizza } from '../shared/pizza';\nimport { Input } from '@angular/core';\n\n@Component({\n  selector: 'app-pizza',\n  templateUrl: './pizza.component.html',\n  styleUrls: ['./pizza.component.scss']\n})\nexport class PizzaComponent implements OnInit {\n\n  @Input() pizza: Pizza;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<h4>üçï {{ pizza.name }} <small><code>#{{ pizza.id }}</code></small></h4>\n<p>{{ pizza.description }}</p>\n\n<a [routerLink]=\"['/pizza', pizza.id]\" class=\"btn\">Go to details page</a>\n\n","<p>\n  This app is running on the <strong>{{ platform }}</strong>  platform.\n</p>\n\n<div class=\"container\">\n  <app-pizza *ngFor=\"let p of pizzas$ | async\" [pizza]=\"p\"></app-pizza>\n</div>\n","import { Component, OnInit, Inject, PLATFORM_ID } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { PizzaService } from '../shared/pizza.service';\nimport { Pizza } from '../shared/pizza';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n\n  pizzas$: Observable<Pizza[]>;\n  platform: string;\n\n  constructor(private ps: PizzaService, @Inject(PLATFORM_ID) private platformId: object) { }\n\n  ngOnInit() {\n    this.pizzas$ = this.ps.getAll();\n\n    if (isPlatformBrowser(this.platformId)) {\n      this.platform = 'üíª browser';\n    } else if (isPlatformServer(this.platformId)) {\n      this.platform = '‚öôÔ∏è server';\n    } else {\n      this.platform = 'unknown';\n    }\n  }\n\n}\n","import { Directive, Input } from '@angular/core';\nimport { NgForOf } from '@angular/common';\n\n@Directive({\n  selector: '[ngFor][ngForRepeat]'\n})\nexport class NgForRepeat<T> extends NgForOf<T> {\n  @Input() set ngForRepeat(repeat: number) {\n    this.ngForOf = new Array(repeat >= 0 ? repeat : 0);\n  }\n}\n","<ng-container *ngIf=\"pizza$ | async as pizza\">\n  <h2>\n    {{ pizza.name }}\n    <ng-container *ngFor=\"let x repeat pizza.rating\">‚≠êÔ∏è</ng-container>\n  </h2>\n\n  <p>\n    {{ pizza.description }}\n  </p>\n\n  <div class=\"price\">{{ pizza.price | currency:'EUR' }}</div>\n</ng-container>\n\n\n<a routerLink=\"/dashboard\" class=\"btn\">Back to dashboard</a>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { DetailsComponent } from './details/details.component';\nimport { InfoComponent } from './info/info.component';\nimport { ImprintComponent } from './imprint/imprint.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'dashboard', pathMatch: 'full' },\n  { path: 'dashboard', component: DashboardComponent },\n  { path: 'pizza/:id', component: DetailsComponent },\n  { path: 'info', component: InfoComponent },\n  { path: 'imprint', component: ImprintComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {\n    initialNavigation: 'enabled'\n})],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Pizza } from '../shared/pizza';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { PizzaService } from '../shared/pizza.service';\n\n\n@Component({\n  selector: 'app-details',\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.component.scss']\n})\nexport class DetailsComponent implements OnInit {\n\n  pizza$: Observable<Pizza>;\n\n  constructor(private route: ActivatedRoute, private ps: PizzaService) { }\n\n  ngOnInit() {\n    this.pizza$ = this.route.paramMap.pipe(\n      map(params => parseInt(params.get('id'), 10)),\n      switchMap(id => this.ps.getById(id))\n    );\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-info',\n  templateUrl: './info.component.html',\n  styleUrls: ['./info.component.scss']\n})\nexport class InfoComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h2>‚ÑπÔ∏è Info</h2>\n\nThis is our super duper pizza app.\nIt's blazing fast because it uses Server-Side Rendering.\n<strong>Do you like it?</strong>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-imprint',\n  templateUrl: './imprint.component.html',\n  styleUrls: ['./imprint.component.scss']\n})\nexport class ImprintComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h2>Imprint and legal info</h2>\n\nLorem ipsum dolor sit amet...\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'ssr-playground';\n}\n","<header>\n  <h1>\n    <a routerLink=\"/\">üçï Pizza Service</a>\n  </h1>\n\n  <div class=\"links\">\n    <a routerLink=\"/info\">Info</a>\n    <a routerLink=\"/imprint\">Imprint</a>\n  </div>\n</header>\n\n<div class=\"container\">\n  <router-outlet></router-outlet>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, LOCALE_ID } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { registerLocaleData } from '@angular/common';\nimport localeDe from '@angular/common/locales/de';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { PizzaComponent } from './pizza/pizza.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { DetailsComponent } from './details/details.component';\nimport { NgForRepeat } from './shared/repeat.directive';\nimport { ImprintComponent } from './imprint/imprint.component';\nimport { InfoComponent } from './info/info.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PizzaComponent,\n    DashboardComponent,\n    DetailsComponent,\n    NgForRepeat,\n    ImprintComponent,\n    InfoComponent\n  ],\n  imports: [\n    BrowserModule.withServerTransition({ appId: 'serverApp' }),\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [\n    { provide: LOCALE_ID, useValue: 'de' }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n  constructor() {\n    registerLocaleData(localeDe);\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  platformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n});\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}